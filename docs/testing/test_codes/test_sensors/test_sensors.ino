/*
 * ============================================================================
 * TEST CAPTEURS - Poulailler Automatique
 * ============================================================================
 * 
 * Test: 3.1 - Light Sensor + Limit Switches
 * Objectif: V√©rifier fonctionnement de tous les capteurs
 * Dur√©e: ~10 minutes
 * 
 * Ce test v√©rifie:
 * - Capteur de luminosit√© (photor√©sistance + diviseur)
 * - Capteur fin de course HAUT
 * - Capteur fin de course BAS
 * - Variations des valeurs selon conditions
 * 
 * C√¢blage requis:
 * Photor√©sistance:
 *   LDR pin1 ‚Üí Arduino 5V
 *   LDR pin2 ‚Üí Arduino A0 + R√©sistance 10kŒ© pin1
 *   R√©sistance 10kŒ© pin2 ‚Üí Arduino GND
 * 
 * Capteurs fin de course:
 *   Capteur HAUT NO ‚Üí Arduino D8
 *   Capteur HAUT Common ‚Üí Arduino GND
 *   Capteur BAS NO ‚Üí Arduino D9
 *   Capteur BAS Common ‚Üí Arduino GND
 * 
 * Proc√©dure:
 * 1. Uploader ce code sur l'Arduino Nano
 * 2. Ouvrir moniteur s√©rie (9600 bauds)
 * 3. Couvrir/d√©couvrir capteur luminosit√©
 * 4. Appuyer sur capteurs fin de course
 * 5. Observer variations dans moniteur s√©rie
 * 
 * R√©sultat attendu:
 * - Valeurs luminosit√© variables (50-900)
 * - Capteurs fin de course changent d'√©tat
 * - R√©ponse imm√©diate aux actions utilisateur
 * 
 * ============================================================================
 */

// Configuration des pins
const int CAPTEUR_LUMIERE = A0;
const int FIN_COURSE_HAUT = 8;
const int FIN_COURSE_BAS = 9;

// Variables globales
unsigned long dernierAffichage = 0;
unsigned long compteurTest = 0;

// Variables pour d√©tection changements
int ancienneValeurLumiere = -1;
bool ancienEtatHaut = true;
bool ancienEtatBas = true;

// Statistiques pour le test
int valeurLumiereMin = 1023;
int valeurLumiereMax = 0;
int nombreChangementsHaut = 0;
int nombreChangementsBas = 0;
bool testHautEffectue = false;
bool testBasEffectue = false;

void setup() {
  // Initialisation communication s√©rie
  Serial.begin(9600);
  delay(1000);
  
  Serial.println("============================================");
  Serial.println("TEST CAPTEURS - Poulailler Automatique");
  Serial.println("============================================");
  Serial.println("Version: 1.0");
  Serial.println("Test: 3.1 - Light Sensor + Limit Switches");
  Serial.println("");
  
  // Configuration des pins
  pinMode(FIN_COURSE_HAUT, INPUT_PULLUP);
  pinMode(FIN_COURSE_BAS, INPUT_PULLUP);
  
  // Test initial des capteurs
  Serial.println("üîç Test initial des capteurs...");
  Serial.println("");
  
  // Test capteur luminosit√©
  int valeurInit = analogRead(CAPTEUR_LUMIERE);
  Serial.print("üí° Capteur luminosit√© (A0): ");
  Serial.print(valeurInit);
  Serial.print(" (");
  if (valeurInit > 800) Serial.println("TR√àS CLAIR)");
  else if (valeurInit > 400) Serial.println("CLAIR)");
  else if (valeurInit > 200) Serial.println("SOMBRE)");
  else Serial.println("TR√àS SOMBRE)");
  
  // Test capteurs fin de course
  bool etatHautInit = digitalRead(FIN_COURSE_HAUT);
  bool etatBasInit = digitalRead(FIN_COURSE_BAS);
  
  Serial.print("üîò Capteur fin course HAUT (D8): ");
  Serial.println(etatHautInit ? "LIBRE" : "ACTIONN√â");
  Serial.print("üîò Capteur fin course BAS (D9): ");
  Serial.println(etatBasInit ? "LIBRE" : "ACTIONN√â");
  
  Serial.println("");
  Serial.println("üìã Instructions de test:");
  Serial.println("1. LUMINOSIT√â: Couvrez/d√©couvrez le capteur avec votre main");
  Serial.println("2. √âCLAIRAGE: Utilisez la lampe de votre t√©l√©phone");
  Serial.println("3. FIN COURSE: Appuyez physiquement sur chaque capteur");
  Serial.println("");
  Serial.println("üïê Test automatique pendant 60 secondes...");
  Serial.println("Observer les valeurs et tester les capteurs manuellement");
  Serial.println("");
  
  // Initialisation valeurs de r√©f√©rence
  ancienneValeurLumiere = valeurInit;
  ancienEtatHaut = etatHautInit;
  ancienEtatBas = etatBasInit;
  
  delay(2000);
}

void loop() {
  // Mise √† jour toutes les 200ms pour r√©activit√©
  if (millis() - dernierAffichage >= 200) {
    dernierAffichage = millis();
    compteurTest++;
    
    // Lecture de tous les capteurs
    int valeurLumiere = analogRead(CAPTEUR_LUMIERE);
    bool etatHaut = digitalRead(FIN_COURSE_HAUT);
    bool etatBas = digitalRead(FIN_COURSE_BAS);
    
    // Mise √† jour statistiques luminosit√©
    if (valeurLumiere < valeurLumiereMin) valeurLumiereMin = valeurLumiere;
    if (valeurLumiere > valeurLumiereMax) valeurLumiereMax = valeurLumiere;
    
    // D√©tection changements capteurs fin de course
    if (etatHaut != ancienEtatHaut) {
      nombreChangementsHaut++;
      testHautEffectue = true;
      Serial.print("üîÑ HAUT: ");
      Serial.println(etatHaut ? "LIBRE" : "ACTIONN√â ‚úÖ");
      ancienEtatHaut = etatHaut;
    }
    
    if (etatBas != ancienEtatBas) {
      nombreChangementsBas++;
      testBasEffectue = true;
      Serial.print("üîÑ BAS: ");
      Serial.println(etatBas ? "LIBRE" : "ACTIONN√â ‚úÖ");
      ancienEtatBas = etatBas;
    }
    
    // Affichage principal toutes les secondes
    if (compteurTest % 5 == 0) {
      Serial.print("Test ");
      Serial.print(compteurTest / 5);
      Serial.print("s | Lum: ");
      
      // Affichage valeur luminosit√© avec barre visuelle
      if (valeurLumiere < 100) Serial.print("  ");
      else if (valeurLumiere < 1000) Serial.print(" ");
      Serial.print(valeurLumiere);
      
      // Barre de progression visuelle
      Serial.print(" [");
      int barres = map(valeurLumiere, 0, 1023, 0, 10);
      for (int i = 0; i < 10; i++) {
        if (i < barres) Serial.print("‚ñà");
        else Serial.print("-");
      }
      Serial.print("]");
      
      // √âtats capteurs fin de course
      Serial.print(" | H:");
      Serial.print(etatHaut ? "‚óã" : "‚óè");
      Serial.print(" B:");
      Serial.print(etatBas ? "‚óã" : "‚óè");
      
      // D√©tection variation significative luminosit√©
      int variation = abs(valeurLumiere - ancienneValeurLumiere);
      if (variation > 50) {
        Serial.print(" üîÑ");
        ancienneValeurLumiere = valeurLumiere;
      }
      
      Serial.println("");
    }
    
    // Messages d'encouragement
    if (compteurTest == 50) { // 10 secondes
      Serial.println("");
      Serial.println("üí° Essayez de couvrir le capteur de luminosit√©!");
      Serial.println("");
    }
    
    if (compteurTest == 150) { // 30 secondes
      Serial.println("");
      Serial.println("üîò N'oubliez pas de tester les capteurs fin de course!");
      Serial.println("");
    }
    
    // Test termin√© apr√®s 60 secondes (300 * 200ms)
    if (compteurTest >= 300) {
      afficherResultatsFinaux(valeurLumiere, etatHaut, etatBas);
      
      // Boucle finale avec affichage continu
      while (true) {
        delay(500);
        
        int lum = analogRead(CAPTEUR_LUMIERE);
        bool h = digitalRead(FIN_COURSE_HAUT);
        bool b = digitalRead(FIN_COURSE_BAS);
        
        Serial.print("Final | Lum:");
        Serial.print(lum);
        Serial.print(" H:");
        Serial.print(h ? "‚óã" : "‚óè");
        Serial.print(" B:");
        Serial.print(b ? "‚óã" : "‚óè");
        Serial.print(" | Plage lum: ");
        Serial.print(valeurLumiereMin);
        Serial.print("-");
        Serial.println(valeurLumiereMax);
      }
    }
  }
  
  delay(10);
}

/*
 * Fonction: Affichage des r√©sultats finaux
 */
void afficherResultatsFinaux(int lumFinale, bool hautFinal, bool basFinal) {
  Serial.println("");
  Serial.println("============================================");
  Serial.println("‚úÖ TEST CAPTEURS TERMIN√â");
  Serial.println("============================================");
  Serial.println("");
  
  Serial.println("üìä R√©sultats du test:");
  Serial.println("");
  
  // R√©sultats capteur luminosit√©
  Serial.println("üí° CAPTEUR LUMINOSIT√â:");
  Serial.print("- Valeur finale: ");
  Serial.println(lumFinale);
  Serial.print("- Plage observ√©e: ");
  Serial.print(valeurLumiereMin);
  Serial.print(" - ");
  Serial.println(valeurLumiereMax);
  
  int plage = valeurLumiereMax - valeurLumiereMin;
  Serial.print("- Variation totale: ");
  Serial.print(plage);
  if (plage > 300) {
    Serial.println(" ‚úÖ EXCELLENTE");
  } else if (plage > 100) {
    Serial.println(" ‚úÖ BONNE");
  } else if (plage > 50) {
    Serial.println(" ‚ö†Ô∏è FAIBLE (v√©rifier c√¢blage)");
  } else {
    Serial.println(" ‚ùå TR√àS FAIBLE (probl√®me capteur)");
  }
  
  // R√©sultats capteurs fin de course
  Serial.println("");
  Serial.println("üîò CAPTEURS FIN DE COURSE:");
  Serial.print("- Capteur HAUT: ");
  Serial.print(hautFinal ? "LIBRE" : "ACTIONN√â");
  Serial.print(" (");
  Serial.print(nombreChangementsHaut);
  Serial.print(" changements) ");
  Serial.println(testHautEffectue ? "‚úÖ" : "‚ö†Ô∏è Non test√©");
  
  Serial.print("- Capteur BAS: ");
  Serial.print(basFinal ? "LIBRE" : "ACTIONN√â");
  Serial.print(" (");
  Serial.print(nombreChangementsBas);
  Serial.print(" changements) ");
  Serial.println(testBasEffectue ? "‚úÖ" : "‚ö†Ô∏è Non test√©");
  
  // √âvaluation globale
  Serial.println("");
  Serial.println("üéØ √âVALUATION GLOBALE:");
  
  bool luminositeOK = (plage > 100);
  bool capteursOK = (testHautEffectue && testBasEffectue);
  
  if (luminositeOK && capteursOK) {
    Serial.println("‚úÖ TOUS CAPTEURS FONCTIONNELS");
    Serial.println("‚û°Ô∏è  Pr√™t pour le test suivant: Bouton multifonction");
  } else {
    Serial.println("‚ö†Ô∏è  QUELQUES PROBL√àMES D√âTECT√âS:");
    if (!luminositeOK) Serial.println("- Capteur luminosit√©: variation insuffisante");
    if (!capteursOK) Serial.println("- Capteurs fin course: test incomplet");
    Serial.println("‚û°Ô∏è  V√©rifier c√¢blage avant test suivant");
  }
  
  Serial.println("");
}

/*
 * ============================================================================
 * DIAGNOSTIC ET D√âPANNAGE
 * ============================================================================
 * 
 * ‚ùå Capteur luminosit√© valeur fixe 0:
 *    - Court-circuit: v√©rifier c√¢blage diviseur r√©sistif
 *    - LDR d√©faillante ou mal connect√©e
 *    - R√©sistance 10kŒ© mal connect√©e
 * 
 * ‚ùå Capteur luminosit√© valeur fixe 1023:
 *    - Circuit ouvert: v√©rifier toutes connexions
 *    - LDR d√©connect√©e de A0
 *    - R√©sistance 10kŒ© non connect√©e √† GND
 * 
 * ‚ùå Capteur luminosit√© ne varie pas:
 *    - LDR d√©faillante (tester r√©sistance avec multim√®tre)
 *    - √âclairage ambiant constant
 *    - C√¢blage incorrect du diviseur r√©sistif
 * 
 * ‚ùå Capteur fin course toujours "LIBRE":
 *    - Capteur d√©faillant ou mal c√¢bl√©
 *    - Connexion NO (Normalement Ouvert) incorrecte
 *    - Pull-up interne non activ√© (INPUT_PULLUP)
 * 
 * ‚ùå Capteur fin course toujours "ACTIONN√â":
 *    - Court-circuit vers GND
 *    - Capteur m√©caniquement bloqu√©
 *    - C√¢blage invers√© (utiliser NC au lieu de NO)
 * 
 * üîß Tests manuels compl√©mentaires:
 *    - Multim√®tre sur A0: doit varier 0-5V selon lumi√®re
 *    - Multim√®tre sur D8/D9: 5V libre, 0V actionn√©
 *    - Test r√©sistance LDR: varie 1kŒ©-100kŒ© selon lumi√®re
 * 
 * ============================================================================
 */